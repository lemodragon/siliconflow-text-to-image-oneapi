addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request))
})

async function handleRequest(request) {
  console.log('Available environment variables:', Object.keys(self));

  if (request.method !== 'POST') {
    return new Response('Method Not Allowed', { status: 405 })
  }

  const authHeader = request.headers.get('Authorization')
  if (!authHeader || !isValidApiKey(authHeader)) {
    return new Response('Unauthorized', { status: 401 })
  }

  try {
    const { prompt, size } = await request.json()
    const enhancedPrompt = await enhancePrompt(prompt)
    console.log('Enhanced prompt:', enhancedPrompt);
    const imageResult = await generateImage(enhancedPrompt, size)
    console.log('Image generation result:', imageResult);

    const response = {
      created: Math.floor(Date.now() / 1000),
      data: [
        {
          url: imageResult.image_url,
        }
      ]
    }
    
    console.log('Final response:', response);
    
    return new Response(JSON.stringify(response), {
      headers: { 'Content-Type': 'application/json' }
    })
  } catch (error) {
    console.error('Error in handleRequest:', error);
    return new Response('Internal Server Error: ' + error.message, { status: 500 })
  }
}

function isValidApiKey(authHeader) {
  console.log('Validating API key');
  const parts = authHeader.split(' ')
  if (parts.length !== 2 || parts[0] !== 'Bearer') {
    return false
  }

  const providedKey = parts[1]
  if (typeof VALID_API_KEYS === 'undefined') {
    console.error('VALID_API_KEYS is undefined');
    return false;
  }
  const validKeys = VALID_API_KEYS.split(',').map(key => key.trim())
  return validKeys.includes(providedKey)
}

function getRandomApiKey() {
  if (typeof API_KEY === 'undefined') {
    console.error('API_KEY is undefined');
    throw new Error('API_KEY environment variable is not set');
  }
  const keys = API_KEY.split(',')
  return keys[Math.floor(Math.random() * keys.length)].trim()
}

async function enhancePrompt(prompt) {
  console.log('Enhancing prompt');
  const apiKey = getRandomApiKey()
  const response = await fetch(DEEPSEEK_API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${apiKey}`
    },
    body: JSON.stringify({
      model: DEEPSEEK_MODEL,
      messages: [
        { role: 'system', content: ENHANCER_PROMPT },
        { role: 'user', content: prompt }
      ]
    })
  })

  const data = await response.json()
  return data.choices[0].message.content
}

async function generateImage(prompt, size) {
  console.log('Generating image');
  const apiKey = getRandomApiKey()
  const response = await fetch(FLUX_API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${apiKey}`
    },
    body: JSON.stringify({
      prompt: prompt,
      image_size: size,
      num_inference_steps: NUM_INFERENCE_STEPS
    })
  })

  const data = await response.json()
  console.log('FLUX API response:', data);

  if (!data.images || data.images.length === 0) {
    throw new Error('No image generated by FLUX API');
  }

  return {
    image_url: data.images[0].url
  }
}